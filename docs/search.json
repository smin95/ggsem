[{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"launching-the-app","dir":"Articles","previous_headings":"","what":"Launching the app","title":"1. Drawing Elements","text":"begin , can launch ggsem Shiny app browser using link: https://smin95.shinyapps.io/ggsem_shiny/. can also started locally RStudio. First, install package Github repository. , run app using code :","code":"install.packages(\"devtools\") devtools::install_github('smin95/ggsem') ggsem::launch()"},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"the-apps-layout","dir":"Articles","previous_headings":"Launching the app","what":"The app’s layout","title":"1. Drawing Elements","text":"picture shows ggsem app. left side, menu. begins dropdown menu Element Selection, allowing users choose type graphical elements add plotting space (inside purple box). five options Element Selection: Point, Line, Text Annotation, Self-loop Arrow, Lavaan Input. Element Selection, users can select order layer graphical elements displayed (inside blue box). default set points front. words, line point overlap, point mask line. Next, slider Zoom Level (within green box). default set factor 1.2x can increased zoom (way factor 10). , sliders Horizontal Position Vertical Position (green box). changes focus plotting space displayed. instance, point cutoff right side plotting space space enough, simply adjust slider Horizontal Position. Furthermore, Undo Redo buttons (yellow box). correspond CTRL + Z CTRL + Y. respectively. illustrate, accidently deleted line, simply click Undo button cancel previous action. app remembers steps inputs, Undo button can work way back beginning. Finally, ’s space plots rendered (red box). Without ado, let’s add graphical elements see options interact together.","code":""},{"path":[]},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"adding-points","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Points","title":"1. Drawing Elements","text":"Lets begin adding point. default coordinate X Y position corresponds origin (0, 0). point created, users can hover mouse point point realize center point X = 0 Y = 0, shown bottomleft plotting space. Users can provide several inputs specify aesthetics point. includes X Y coordinates, also filling color (Point Color), shape (Select Shape), size (Point Size), width border (Border Width), color border (Border Color), alpha level (Point Alpha). , can draw square point setting inputs shown : X Coordinate: 5 Y Coordinate: 5 Point Color: #D0C5ED Select Shape: square Point Size: 50 Border Width: 2 Border Color: #9646D4 Point Alpha: 1 specified, please click Add Point button (pink box) render output. make mistakes, can click Undo button cancel changes.","code":""},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"adding-lines","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Lines","title":"1. Drawing Elements","text":"Next, add line selecting Line dropdown menu Choose Element Type. numerous parameters aesthetics users can specify. can start drawing black line coordinates (leave default inputs unchanged): Start X Coordinate: 2 Start Y Coordinate: -2 End X Coordinate: 8 End Y Coordinate: -2 Add Line button clicked, line drawn purple square (shown picture ). Also, users can delete elements interacting table. Simply click row interest, click Delete Selected Point (green box). line single color, specified dropdown menu Line Color Type. Next, draw curved line, whose curvature automatically adjusted based X Y coordinates line segment can manually adjusted controlling Control Point X Control Point Y. Additionally, can set gradient two colors setting Gradient. choose Gradient, conditional color menu appear (End Color), well Gradient Intersection, slider allows us give fine control gradient occurs line segment’s length. Start X Coordinate: 2 Start Y Coordinate: 12 End X Coordinate: 8 End Y Coordinate: 12 Start Color: #F57373 Line Color Type: Gradient End Color: #53F26D Gradient Intersection: 0.5 Line Width: 2 Line Alpha: 1 Line Type: Curved Line gradient intersection either close 0 1, display one color . instance, set 0.01, *End COlor** dominate line segment.  Next, add arrow setting dropdown menu Line Type Straight Arrow, parameters : Start X Coordinate: 18 Start Y Coordinate: 5 End X Coordinate: 12 End Y Coordinate: 5 Start Color: #9E9E9E Line Color Type: Gradient End Color: #54F5AF Gradient Intersection: 0.2 Line Width: 2 Line Alpha: 1 Line Type: Straight Arrow  Leave inputs intact, Arrow Type (open closed arrowheads) Arrow Size (size arrow head).","code":""},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"adding-text-annotations","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Text Annotations","title":"1. Drawing Elements","text":"Now, add text annotation beside end arrow, labelled “Square One” using inputs : Text: Square One X Coordinate: 26 Y Coordinate: 5 Font: Arial Text Size: 20 Color: #000000 Angle (deg): 0 Text Alpha: 1 Typeface: Bold Add Text button pressed, text “Square One”” rendered. However, see text cutoff right side enough plotting space. X Y coordinates text refer position text’s center. , use slider Horizontal Position re-adjust focus plotting space: Horizontal Position: 8","code":""},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"adding-self-loop-arrows","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Self-loop Arrows","title":"1. Drawing Elements","text":"Finally, can add circular self-loop arrow plotting output using inputs : X Coordinate (Center): -5 Y Coordiante (Center): 5 Radius: 2 Line Width: 1 Line Color: #000000 Line Alpha: 1 Arrow Type: closed Arrow Size: 0.1 Loop Width: 1 Loop Height: 1 generate self-loop arrow left side Add Self-loop Arrow button clicked.","code":""},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"saving-data-and-graphics","dir":"Articles","previous_headings":"Adding Elements","what":"Saving Data and Graphics","title":"1. Drawing Elements","text":"Notice whenever add graphical element onto plotting space, output table gets updated. four tables total: 1) Points Table, 2) Lines Table, 3) Annotations Table, 4) Self-loop Arrows Table. Users can directly manipulate aesthetics elements modifying numiercal inputs table, x Y coordinates alpha level. can also save CSV files, close ggsem app, load continue working figures later future. download four tables, go dropdown menu Choose CSV Download, click button Download Selected CSV, four tables. reload CSV files back app, users can click Browse Upload CSV Files locate CSV files interest. output image can also exported either PNG, JPEG, PDF SVG.  picture directly exported PNG output shiny app.","code":""},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt1.html","id":"modifying-the-plot-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the Plot from ggsem app in ggplot2 Workflow","title":"1. Drawing Elements","text":"plot generated can recreated ggplot2 object RStudio using function csv_to_ggplot(). can save figure PNG file verify whether identical one drawn ggsem Shiny app. , set width = 9 height = 9 dimension exported image file.  can also add plot light-grey (grey90) background graphical output using typical ggplot2 functions change range y-axis. can save figure using ggsave().  can also chip away extra space directly dealing axis limits figure. First, extract current range y-axis limit p2 object. y-axis spans -22 22. can reduce space top bottom (y-axis range: -8 19). , need use function coord_cartesian(). can also modify range x-axis slightly (-9 30). , save figure using ggsave(). successfully cropped empty space recreated figure appear Shiny app using ggplot2 workflow. height width arguments might need tested attempts find best ones (takes practice!). Essentially, csv_to_ggplot() returns ggplot2 object ratio fixed 1, allowing plots appear exactly Shiny app. However, x y limits must changed ggplot2 workflow (example), ratio must broken (function coord_cartesian()). changes relative spacing visual elements plot. , ratio set setting width height output image file, width = 5.5 height = 2.3. Tip: plot gets cut-, either increase width height () ggsave().","code":"library(tidyverse) library(cowplot) library(ggsem)  # CSV files from ggsem app points_data <- read_csv('https://www.smin95.com/points.csv')  lines_data <- read_csv('https://www.smin95.com/lines.csv') annotations_data <- read_csv('https://www.smin95.com/annotations.csv') loops_data <- read_csv('https://www.smin95.com/loops.csv')  p1 <- csv_to_ggplot(points_data = points_data,                     lines_data = lines_data,                     annotations_data = annotations_data,                     loops_data = loops_data,                     zoom_level = 1.2, # From the ggsem app                     horizontal_position = 8, # From the ggsem app                     vertical_position = 0) # Default verfical position on the app ggsave('p1.png', p1, width = 9, height = 9) p2 <- p1 + theme(   plot.background = element_rect(fill = \"grey90\", color = NA)  # Grey background, no border ) ggsave('p2.png', p2, width = 9, height = 9) plot_build <- ggplot_build(p2) plot_build$layout$panel_params[[1]]$y.range # y-axis range #> [1] -26.4  26.4 plot_build$layout$panel_params[[1]]$x.range # x-axis range #> [1] -18.4  34.4 p2b <- p2 + coord_cartesian(ylim = c(-8,19)) p2c <- p2b + coord_cartesian(xlim = c(-9,30)) ggsave('p2c.png', p2c, width = 5.5, height = 2.3)"},{"path":"https://smin95.github.io/ggsem/articles/Shiny_app_pt2.html","id":"network-layouts-of-points-nodes","dir":"Articles","previous_headings":"","what":"Network Layouts of Points (Nodes)","title":"2. Plotting Networks","text":"ggsem app provides numerous layouts, derived igraph package. instance, users draw 10 points clicking Add Point button 10 times, choose certain layout, points can sorted network configuration. layouts : 1) Circle, 2) Grid, 3) Random, 4) Star, 5) Fruchterman-Reingold, 6) Kamada-Kawai, 7) Horizontal Straight Line, 8) Vertical Straight Line. Let’s start creating 10 points clicking Add Point button 10 times. Since located origin (X = 0, Y = 0), overlapped plotting area. able see one black point. confirm whether 10 points, check Points Table see 10 rows total. Layout Functions part menu, important inputs. : Layout Type: aforementioned eight layouts. Point Distance: Relative distance two neighboring points/nodes. Center X Position: X coordinate network’s center. Center Y Position: Y coordinate network’s center. Gradient Start Color: first color gradient. Gradient End Color: second color gradient. three additional buttons. : Auto-layout Points: click button (least unlocked two points), points arranged specific configuration based Layout Type input. Apply Gradient: click button (least unlocked two points), filling color points gradient palette. Lock Points: button pressed, existing points Points Table become locked, becoming immune effect subsequent effects Auto-layout Points Apply Gradient. words, batch points arranged appropriately, click button keep characteristics (position color). Now know inputs , let’s start setting layout : Layout Type: Circle click Auto-layout Points button, points sorted circle, whose center origin (X = 0, Y = 0) specified. Let’s finish adding one point center (X = 0, Y = 0).","code":""},{"path":[]},{"path":"https://smin95.github.io/ggsem/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Seung Hyun Min. Maintainer.","code":""},{"path":"https://smin95.github.io/ggsem/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"person, ) e=\" (2024). ggsem: Customisable, Interactive Reproducible Visualizations Path Diagrams, Structural Equation Modeling (SEM) Diagrams, Networks Using 'ggplot2' Framework. R package version 0.1.0, https://smin95.github.io/ggsem.","code":"@Manual{,   title = {ggsem: Customisable, Interactive and Reproducible Visualizations of Path Diagrams, Structural Equation Modeling (SEM) Diagrams, and Networks Using the 'ggplot2' Framework},   author = {{person} and email = \"seung.min@mail.mcgill.ca\" )},   year = {2024},   note = {R package version 0.1.0},   url = {https://smin95.github.io/ggsem}, }"},{"path":"https://smin95.github.io/ggsem/index.html","id":"installation-using-rstudio","dir":"","previous_headings":"","what":"Installation using RStudio","title":"Customisable, Interactive and Reproducible Visualizations of Path Diagrams, Structural Equation Modeling (SEM) Diagrams, and Networks Using the ggplot2 Framework","text":"development version can directly downloaded :","code":"install.packages(\"devtools\") devtools::install_github('smin95/ggsem')"},{"path":"https://smin95.github.io/ggsem/index.html","id":"running-the-shiny-app","dir":"","previous_headings":"","what":"Running the Shiny App","title":"Customisable, Interactive and Reproducible Visualizations of Path Diagrams, Structural Equation Modeling (SEM) Diagrams, and Networks Using the ggplot2 Framework","text":"Shiny app can initiated online using link: https://smin95.shinyapps.io/ggsem_shiny/. can also started locally RStudio: access updated tutorial (sample codes figures) package, please visit https://smin95.github.io/ggsem/.","code":"ggsem::launch()"},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert CSV (from ggsem Shiny app) to ggplot2 output — csv_to_ggplot","title":"Convert CSV (from ggsem Shiny app) to ggplot2 output — csv_to_ggplot","text":"function converts four CSV files ggsem Shiny app ggplot2 output object. ggplot2 output can modified using standard ggplot2 functions, ggtitle() annotate().","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert CSV (from ggsem Shiny app) to ggplot2 output — csv_to_ggplot","text":"","code":"csv_to_ggplot(   points_data,   lines_data,   annotations_data,   loops_data,   element_order = c(\"annotations\", \"self_loops\", \"points\", \"lines\"),   zoom_level = 1.2,   horizontal_position = 0,   vertical_position = 0 )"},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert CSV (from ggsem Shiny app) to ggplot2 output — csv_to_ggplot","text":"points_data object stores CSV file containing information points ggsem Shiny app. lines_data object stores CSV file containing information lines ggsem Shiny app. annotations_data object stores CSV file containing information text annotations ggsem Shiny app. loops_data object stores CSV file containing information self-loop arrows ggsem Shiny app. element_order Order graphical elements display. default set annotations front lines back. can changed providing vector four elements strings, : c(\"self_loops\", \"annotations\", \"points\", \"lines\") zoom_level numeric value control zoom level plot. Default 1.2. horizontal_position numeric value adjusting horizontal position plot. Default 0. vertical_position numeric value adjusting vertical position plot. Default 0.","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert CSV (from ggsem Shiny app) to ggplot2 output — csv_to_ggplot","text":"Returns ggplot2 object.","code":""},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ggsem (Shiny app) in a web browser — launch","title":"Run ggsem (Shiny app) in a web browser — launch","text":"Run ggsem (Shiny app) web browser","code":""},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ggsem (Shiny app) in a web browser — launch","text":"","code":"launch()"}]
